{"version":3,"sources":["component/input.js","component/main.js","App.js","serviceWorker.js","reducers/inputReducer.js","reducers/mainReducer.js","store.js","index.js"],"names":["Input","state","_this2","this","react_default","a","createElement","className","type","placeholder","onChange","e","props","handleChange","target","required","onClick","add","input","Component","connect","dispatch","value","id","Math","floor","random","input1","Main","todo","map","el","key","class","delete","main","App","Boolean","window","location","hostname","match","inputReducer","arguments","length","undefined","action","mainReducer","concat","Object","toConsumableArray","filter","store","createStore","combineReducers","ReactDOM","render","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qQAGMA,oNACFC,MAAQ,2EACC,IAAAC,EAAAC,KACL,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACfH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,MAAd,YACIH,EAAAC,EAAAC,cAAA,SAAOC,UAAU,QAAQC,KAAK,OAAOC,YAAY,yBAAyBC,SAAU,SAACC,GAAKT,EAAKU,MAAMC,aAAaF,EAAEG,SAAUC,UAAQ,IACtIX,EAAAC,EAAAC,cAAA,UAAQC,UAAU,MAAMS,QAAS,WAAKd,EAAKU,MAAMK,IAAIf,EAAKU,MAAMM,SAAhE,eAPIC,cAgCLC,cApBQ,SAACnB,GACpB,MAAO,CACHiB,MAAMjB,EAAMiB,QAGM,SAACG,GACvB,MAAO,CACHR,aAAa,SAACC,GACVO,EAAS,CAACb,KAAK,YAAYc,MAAMR,EAAOQ,SAE5CL,IAAI,SAACC,GACD,IACIK,EAAGC,KAAKC,MAAoB,IAAdD,KAAKE,UAGvBL,EAAS,CAACb,KAAK,YAAYU,MADtB,CAACK,KAAGI,OADGT,QAOTE,CAA6CpB,GChCtD4B,6MACF3B,MAAQ,2EACC,IAAAC,EAAAC,KACL,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,MACZH,EAAAC,EAAAC,cAAA,UACMH,KAAKS,MAAMiB,KAAKC,IAAI,SAACC,GACd,OACI3B,EAAAC,EAAAC,cAAA,MAAI0B,IAAKD,EAAGR,GAAIhB,UAAU,MAAMwB,EAAGJ,OAC/BvB,EAAAC,EAAAC,cAAA,KAAG2B,MAAM,eAAejB,QAAS,WAAKd,EAAKU,MAAMsB,OAAOH,EAAGR,mBAT5EJ,aAgCJC,cAbS,SAACnB,GACrB,MAAO,CACH4B,KAAM5B,EAAMkC,OAGO,SAACd,GACxB,MAAO,CACHa,OAAQ,SAACX,GACLF,EAAS,CAAEb,KAAM,eAAgBe,GAAIA,OAKlCH,CAA4CQ,GCpB5CQ,6MAXbnC,MAAQ,2EAEN,OACEG,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACY,EAAD,MACAd,EAAAC,EAAAC,cAAC6B,EAAD,cANUhB,aCSEkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,sECXSC,EAPM,WAAqB,IAApBzC,EAAoB0C,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAd,GAAGG,EAAWH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EACtC,MAAkB,cAAdC,EAAOtC,KACAsC,EAAOxB,MAEXrB,WCKI8C,EATI,WAAoB,IAAnB9C,EAAmB0C,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAb,GAAGG,EAAUH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EACnC,MAAkB,cAAdC,EAAOtC,KACK,GAAAwC,OAAAC,OAAAC,EAAA,EAAAD,CAAKhD,GAAL,CAAW6C,EAAO5B,QAEhB,iBAAd4B,EAAOtC,KACAP,EAAMkD,OAAO,SAAApB,GAAE,OAAEA,EAAGR,KAAKuB,EAAOvB,KAEpCtB,GCGImD,EAPDC,YAAYC,YAAgB,CACtCpC,MAAOwB,EACPP,KAAKY,KCGTQ,IAASC,OAAOpD,EAAAC,EAAAC,cAACmD,EAAA,EAAD,CAAUL,MAAOA,GAAOhD,EAAAC,EAAAC,cAACoD,EAAD,OAAoBC,SAASC,eAAe,SJyH9E,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.152d4a2f.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport {connect} from 'react-redux';\r\nimport '../App.css'\r\nclass Input extends Component {\r\n    state = {  }\r\n    render() { \r\n        return ( \r\n            <div className=\"inbtn\"> \r\n            <h2 className=\"h2\">ADD LIST</h2>\r\n                <input className=\"input\" type=\"text\" placeholder=\"Ecrire Votre Texte Ici\" onChange={(e)=>{this.props.handleChange(e.target)}} required/>\r\n                <button className=\"btn\" onClick={()=>{this.props.add(this.props.input)}}>ADD</button>\r\n            </div>\r\n         );\r\n    }\r\n}\r\nconst mapStateToProps =(state)=>{\r\n    return {\r\n        input:state.input\r\n    }\r\n}\r\nconst mapDispatchToProps =(dispatch)=>{\r\n    return {\r\n        handleChange:(target)=>{\r\n            dispatch({type:'SET_INPUT',value:target.value})\r\n        },\r\n        add:(input)=>{\r\n            let obj ={}\r\n            let id=Math.floor(Math.random()*1000)\r\n            let input1= input\r\n            obj ={id,input1}\r\n            dispatch({type:'ADD_INPUT',input:obj})\r\n        }\r\n    }\r\n}\r\n \r\nexport default connect (mapStateToProps,mapDispatchToProps)(Input);","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport '../App.css'\r\nclass Main extends Component {\r\n    state = {  }\r\n    render() { \r\n        return ( \r\n            <div className=\"ul\">\r\n               <ul>\r\n                    {this.props.todo.map((el) => {\r\n                            return (\r\n                                <li key={el.id} className=\"li\">{el.input1}\r\n                                    <i class=\"fas fa-trash\" onClick={()=>{this.props.delete(el.id)}}></i>\r\n                                </li>\r\n                            )\r\n                        })\r\n                    }\r\n                </ul>\r\n            </div>\r\n         );\r\n    }\r\n}\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        todo: state.main\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        delete: (id) => {\r\n            dispatch({ type: 'REMOVE_INPUT', id: id })\r\n        }\r\n    }\r\n}\r\n \r\nexport default connect(mapStateToProps,mapDispatchToProps)(Main);","import React, { Component } from 'react';\nimport Input from './component/input.js'\nimport Main from './component/main.js'\nclass App extends Component {\n  state = {  }\n  render() { \n    return ( \n      <div className=\"App\">\n        <Input />\n        <Main />\n      </div>\n    );\n  }\n}\n \nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const inputReducer = (state='',action) => {\r\n    if (action.type==='SET_INPUT'){\r\n        return action.value\r\n    }\r\n    return state\r\n}\r\n\r\nexport default inputReducer","const mainReducer =(state=[],action)=> {\r\n    if (action.type==='ADD_INPUT'){\r\n        return state=[...state,action.input]\r\n    }\r\n    if (action.type==='REMOVE_INPUT'){\r\n        return state.filter(el=>el.id!==action.id)\r\n    }\r\n    return state\r\n}\r\nexport default mainReducer","import {createStore,combineReducers} from 'redux'\r\nimport inputReducer from './reducers/inputReducer.js'\r\nimport mainReducer from './reducers/mainReducer.js'\r\nconst store = createStore(combineReducers({\r\n    input: inputReducer,\r\n    main:mainReducer\r\n\r\n}\r\n))\r\n\r\nexport default store","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from 'react-redux'\nimport store from './store.js'\n\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}